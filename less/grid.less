
// Grid Variables ------------------------------------------------------

@grid-cols: 12;
@grid-gutter: 24px;

@container-sm: (@screen-sm-min - 60);
@container-md: (@screen-md-min - 60);
@container-lg: (@screen-lg-min - 60);


// Utilities -----------------------------------------------------------

.grid-calc(@i; @n; @type) when (@type = width) {
  float: left;
  width: percentage((@i / @n));
}
.grid-calc(@i; @n; @type) when (@type = offset) {
  margin-left: percentage((@i / @n));
}
.grid-calc(@i; @n; @type) when (@type = push) {
  left: percentage((@i / @n));
}
.grid-calc(@i; @n; @type) when (@type = pull) {
  right: percentage((@i / @n));
}


// Grid Mixins ---------------------------------------------------------

// Set properties for a grid container
.make-container(@gutter: @grid-gutter) {
  .clearfix();
  margin-left: auto;
  margin-right: auto;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);
}

// Set properties for a row container
.make-row(@gutter: @grid-gutter) {
  .clearfix();
  margin-left: (@gutter / -2);
  margin-right: (@gutter / -2);
}

// Set base properties for a column
.make-column-base(@gutter: @grid-gutter) {
  position: relative;
  min-height: 1px;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);
}

// Set up a standard column
.make-xs-column(@i; @cols: @grid-cols) {
  .grid-calc(@i; @cols; width);
}
.make-sm-column(@i; @cols: @grid-cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; width);
  }
}
.make-md-column(@i; @cols: @grid-cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; width);
  }
}
.make-lg-column(@i; @cols: @grid-cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; width);
  }
}

// One-line setup combines .make-column-base and .make-*-column()
.make-column(@i; @size; @cols: @grid-cols; @gutter: @grid-gutter) {

  // Set base properties
  .make-column-base(@gutter);

  // Pick mixin based on @size
  .make(@i; @cols; @size) when (@size = xs) {
    .make-xs-column(@i; @cols);
  }
  .make(@i; @cols; @size) when (@size = sm) {
    .make-sm-column(@i; @cols);
  }
  .make(@i; @cols; @size) when (@size = md) {
    .make-md-column(@i; @cols);
  }
  .make(@i; @cols; @size) when (@size = lg) {
    .make-lg-column(@i; @cols);
  }

  // Make it
  .make(@i; @cols; @size);
}

// Set up an offset column
.make-xs-offset(@i; @cols) {
  .grid-calc(@i; @cols; offset);
}
.make-sm-offset(@i; @cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; offset);
  }
}
.make-md-offset(@i; @cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; offset);
  }
}
.make-lg-offset(@i; @cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; offset);
  }
}

// Set up a push column
.make-xs-push(@i; @cols) {
  .grid-calc(@i; @cols; push);
}
.make-sm-push(@i; @cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; push);
  }
}
.make-md-push(@i; @cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; push);
  }
}
.make-lg-push(@i; @cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; push);
  }
}

// Set up a pull column 
.make-xs-pull(@i; @cols) {
  .grid-calc(@i; @cols; pull);
}
.make-sm-pull(@i; @cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; pull);
  }
}
.make-md-pull(@i; @cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; pull);
  }
}
.make-lg-pull(@i; @cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; pull);
  }
}


// Grid Framework ------------------------------------------------------

// Build column classes
.make-column-classes(@cols; @size) {

  .cols(@i; @size) when (@i > 0) {
    
    // Column
    .@{size}-@{i} {
      .grid-calc(@i; @cols; width);
    }

    // Offset
    .@{size}-offset-@{i} {
      .grid-calc(@i; @cols; offset);
    }

    // Push
    .@{size}-push-@{i} {
      .grid-calc(@i; @cols; push);
    }

    // Pull
    .@{size}-pull-@{i} {
      .grid-calc(@i; @cols; pull);
    }

    // Loop
    .cols((@i - 1); @size);
  }
  .cols(@cols; @size);

}

// Grid builder
// One-stop shop -- builds all the default grid classes at once
// (grid, row, columns, offsets, pushes, pulls)
.make-grid(@cols: @grid-cols; @gutter: @grid-gutter) {
  
  // Build the grid container class
  .grid {
    .make-container(@gutter);

    @media (min-width: @screen-sm-min) {
      width: @container-sm;
    }
    @media (min-width: @screen-md-min) {
      width: @container-md;
    }
    @media (min-width: @screen-lg-min) {
      width: @container-lg;
    }
  }
  // Build the row container class
  .row { .make-row(@gutter); }

  // Build the .col global class
  .col { .make-column-base(@gutter); }

  // Build all column classes (regular columns, offsets, pushes and pulls)
  .make-column-classes(@cols; xs);
  @media (min-width: @screen-sm-min) {
    .make-column-classes(@cols; sm);
  }
  @media (min-width: @screen-md-min) {
    .make-column-classes(@cols; md);
  }
  @media (min-width: @screen-lg-min) {
    .make-column-classes(@cols; lg);
  }
}

// Scaffolding doesn't actually build the grid for you, just in case you're
// interested in using the framework your own way. To build a standard grid
// in your app, just call .make-grid() in your main less file (or wherever).

