//
// Grid system
// =============================================================================================


// Calculators
// ---------------------------------------------------------------------------------------------

.grid-calc(@i; @n; @type) when (@type = width) {
  float: left;
  width: percentage((@i / @n));
}
.grid-calc(@i; @n; @type) when (@type = offset) {
  margin-left: percentage((@i / @n));
}
.grid-calc(@i; @n; @type) when (@type = push) {
  left: percentage((@i / @n));
}
.grid-calc(@i; @n; @type) when (@type = pull) {
  right: percentage((@i / @n));
}


// Grid framework
// ---------------------------------------------------------------------------------------------

// Container -----------------------------------------------------------

// Set container defaults
.container-defaults(@gutter: @grid-gutter) {
  .clearfix();

  margin-left:    auto;
  margin-right:   auto;
  padding-left:   (@gutter / 2);
  padding-right:  (@gutter / 2);
}

// Make a responsive container
.make-container(
  @gutter: @grid-gutter,
  @sm: @container-sm,
  @md: @container-md,
  @lg: @container-lg,
  @xl: @container-xl
) {
  .container-defaults(@gutter);

  @media only screen and (min-width: @screen-sm-min) {
    width: @sm;
  }
  @media only screen and (min-width: @screen-md-min) {
    width: @md;
  }
  @media only screen and (min-width: @screen-lg-min) {
    width: @lg;
  }
  @media only screen and (min-width: @screen-xl-min) {
    width: @xl;
  }
}

// Row -----------------------------------------------------------------

.make-row(@gutter: @grid-gutter) {
  .clearfix();

  margin-left:   -(@gutter / 2);
  margin-right:  -(@gutter / 2);
}

// Columns --------------------------------------------------------------

// Set base column properties
.column-defaults(@gutter: @grid-gutter) {
  position:       relative;
  min-height:     @col-min-height;
  padding-left:   (@gutter / 2);
  padding-right:  (@gutter / 2);
}

// Sizes
.xs-column(@i; @cols: @grid-cols) {
  .grid-calc(@i; @cols; width);
}
.sm-column(@i; @cols: @grid-cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; width);
  }
}
.md-column(@i; @cols: @grid-cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; width);
  }
}
.lg-column(@i; @cols: @grid-cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; width);
  }
}
.xl-column(@i; @cols: @grid-cols) {
  @media (min-width: @screen-xl-min) {
    .grid-calc(@i; @cols; width);
  }
}

// Offsets -------------------------------------------------------------

.xs-offset(@i; @cols: @grid-cols) {
  .grid-calc(@i; @cols; offset);
}
.sm-offset(@i; @cols: @grid-cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; offset);
  }
}
.md-offset(@i; @cols: @grid-cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; offset);
  }
}
.lg-offset(@i; @cols: @grid-cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; offset);
  }
}
.xl-offset(@i; @cols: @grid-cols) {
  @media (min-width: @screen-xl-min) {
    .grid-calc(@i; @cols; offset);
  }
}

// Pushes --------------------------------------------------------------

.xs-push(@i; @cols: @grid-cols) {
  .grid-calc(@i; @cols; push);
}
.sm-push(@i; @cols: @grid-cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; push);
  }
}
.md-push(@i; @cols: @grid-cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; push);
  }
}
.lg-push(@i; @cols: @grid-cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; push);
  }
}
.xl-push(@i; @cols: @grid-cols) {
  @media (min-width: @screen-xl-min) {
    .grid-calc(@i; @cols; push);
  }
}

// Pulls ---------------------------------------------------------------

.xs-pull(@i; @cols: @grid-cols) {
  .grid-calc(@i; @cols; pull);
}
.sm-pull(@i; @cols: @grid-cols) {
  @media (min-width: @screen-sm-min) {
    .grid-calc(@i; @cols; pull);
  }
}
.md-pull(@i; @cols: @grid-cols) {
  @media (min-width: @screen-md-min) {
    .grid-calc(@i; @cols; pull);
  }
}
.lg-pull(@i; @cols: @grid-cols) {
  @media (min-width: @screen-lg-min) {
    .grid-calc(@i; @cols; pull);
  }
}
.xl-pull(@i; @cols: @grid-cols) {
  @media (min-width: @screen-xl-min) {
    .grid-calc(@i; @cols; pull);
  }
}


// Builder
// ---------------------------------------------------------------------------------------------

// Column class loop ---------------------------------------------------

.make-column-classes(@cols; @size) {

  .cols(@i; @size) when (@i > 0) {
    // Column
    .@{size}-@{i} {
      .grid-calc(@i; @cols; width);
    }
    // Offset
    .@{size}-offset-@{i} {
      .grid-calc(@i; @cols; offset);
    }
    // Push
    .@{size}-push-@{i} {
      .grid-calc(@i; @cols; push);
    }
    // Pull
    .@{size}-pull-@{i} {
      .grid-calc(@i; @cols; pull);
    }
    // Loop
    .cols((@i - 1); @size);
  }

  .cols(@cols; @size);
}

// Grid builder --------------------------------------------------------

.make-grid(@cols: @grid-cols; @gutter: @grid-gutter) {

  // Build container class
  .container {
    .make-container(
      @gutter;
      @container-sm;
      @container-md;
      @container-lg;
      @container-xl
    );
  }

  // Build row class
  .row {
    .make-row(@gutter);
  }

  // Build base column class
  .col {
    .column-defaults(@gutter);
  }

  // Build individual column classes
  .make-column-classes(@cols; xs);
  @media (min-width: @screen-sm-min) {
    .make-column-classes(@cols; sm);
  }
  @media (min-width: @screen-md-min) {
    .make-column-classes(@cols; md);
  }
  @media (min-width: @screen-lg-min) {
    .make-column-classes(@cols; lg);
  }
  @media (min-width: @screen-xl-min) {
    .make-column-classes(@cols; xl);
  }
}


// =============================================================================================
